{{ '<|start_header_id|>system<|end_header_id|>\n\n' -}}
{% if builtin_tools or custom_tools -%}
Environment: ipython
{% endif -%}
{%- set builtin_tools = builtin_tools | reject('equalto', 'code_interpreter') | list -%}
{%- if builtin_tools -%}
Tools: {{ builtin_tools | join(", ") }}
{% endif -%}
Cutting Knowledge Date: December 2023
Today Date: {{ today }}
<|eot_id|>
{%- if custom_tools %}
{{- '<|start_header_id|>user<|end_header_id|>\n\n' -}}

Answer the user's question by making use of the following functions if needed.
If none of the function can be used, please say so.
Here is a list of functions in JSON format:
{% for t in custom_tools %}
{#- manually setting up JSON because jinja sorts keys in unexpected ways -#}
{%- set tname = t.tool_name -%}
{%- set tdesc = t.description -%}
{%- set tparams = t.parameters -%}
{%- set required_params = [] -%}
{%- for param in tparams if param.required == true -%}
    {%- set _ = required_params.append(param.name) -%}
{%- endfor -%}
{
    "type": "function",
    "function": {
        "name": "{{tname}}",
        "description": "{{tdesc}}",
        "parameters": {
            "type": "object",
            "properties": [
                {%- for param in tparams %}
                {
                    "{{param.name}}": {
                        "type": "object",
                        "description": "{{param.description}}"
                    }
                }{% if not loop.last %},{% endif %}
                {%- endfor %}
            ],
            "required": {{ required_params | tojson }}
        }
    }
}
{% endfor %}
Return function calls in JSON format.
<|eot_id|>
{%- endif -%}
{{ additional_instructions -}}
